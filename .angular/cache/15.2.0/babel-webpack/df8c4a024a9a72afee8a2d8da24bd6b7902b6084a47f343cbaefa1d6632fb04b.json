{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction CreateContentComponent_p_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 5);\n    i0.ɵɵtext(1, \"Failed to add content.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContentComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.error);\n  }\n}\nexport class CreateContentComponent {\n  constructor() {\n    this.contentAdded = new EventEmitter();\n    this.id = '';\n    this.title = '';\n    this.description = '';\n    this.creator = '';\n    this.additionFailed = false;\n    this.error = '';\n  }\n  addContent() {\n    const content = {\n      id: parseInt(this.id),\n      title: this.title,\n      description: this.description,\n      creator: this.creator\n    };\n    const promise = new Promise((resolve, reject) => {\n      if (!this.title || !this.description || !this.creator || !this.id) {\n        this.error = 'Please fill in all required fields.';\n        return reject('Missing required fields');\n      }\n      this.contentAdded.emit(content);\n      this.error = '';\n      this.id = '';\n      this.title = '';\n      this.description = '';\n      this.creator = '';\n      resolve();\n    });\n    promise.then(() => {\n      console.log(`Successfully added ${content.title}!`);\n      this.additionFailed = false;\n    }).catch(() => {\n      console.error(`Failed to add ${content.title}`);\n      this.additionFailed = true;\n    });\n    ;\n  }\n}\nCreateContentComponent.ɵfac = function CreateContentComponent_Factory(t) {\n  return new (t || CreateContentComponent)();\n};\nCreateContentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateContentComponent,\n  selectors: [[\"app-create-content\"]],\n  outputs: {\n    contentAdded: \"contentAdded\"\n  },\n  decls: 19,\n  vars: 6,\n  consts: [[1, \"create-content-card\"], [1, \"input\"], [3, \"ngModel\", \"ngModelChange\"], [1, \"input\", 3, \"click\"], [\"style\", \"color: red; font-weight: bold;\", 4, \"ngIf\"], [2, \"color\", \"red\", \"font-weight\", \"bold\"]],\n  template: function CreateContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\");\n      i0.ɵɵtext(2, \"Add a Content\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1);\n      i0.ɵɵtext(4, \"Id: \");\n      i0.ɵɵelementStart(5, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function CreateContentComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.id = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 1);\n      i0.ɵɵtext(7, \"Title: \");\n      i0.ɵɵelementStart(8, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function CreateContentComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.title = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 1);\n      i0.ɵɵtext(10, \"Description: \");\n      i0.ɵɵelementStart(11, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function CreateContentComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.description = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 1);\n      i0.ɵɵtext(13, \"Creator: \");\n      i0.ɵɵelementStart(14, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function CreateContentComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.creator = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function CreateContentComponent_Template_button_click_15_listener() {\n        return ctx.addContent();\n      });\n      i0.ɵɵtext(16, \"Create Content\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(17, CreateContentComponent_p_17_Template, 2, 0, \"p\", 4);\n      i0.ɵɵtemplate(18, CreateContentComponent_div_18_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.id);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.title);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.description);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.creator);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.additionFailed);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.error);\n    }\n  },\n  dependencies: [i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\".create-content-card[_ngcontent-%COMP%]{\\r\\n    text-align: center;\\r\\n    border: 1px black solid;\\r\\n    display: block;\\r\\n    width: 420px;\\r\\n    box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%);\\r\\n    padding: 20px;\\r\\n    margin: 20px;\\r\\n}\\r\\n.input[_ngcontent-%COMP%]{\\r\\n    margin-top: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY3JlYXRlLWNvbnRlbnQvY3JlYXRlLWNvbnRlbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQix1QkFBdUI7SUFDdkIsY0FBYztJQUNkLFlBQVk7SUFDWix3Q0FBd0M7SUFDeEMsYUFBYTtJQUNiLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQiIsInNvdXJjZXNDb250ZW50IjpbIi5jcmVhdGUtY29udGVudC1jYXJke1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyOiAxcHggYmxhY2sgc29saWQ7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHdpZHRoOiA0MjBweDtcclxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDhweCAwIHJnYigwIDAgMCAvIDIwJSk7XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gICAgbWFyZ2luOiAyMHB4O1xyXG59XHJcbi5pbnB1dHtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","CreateContentComponent","constructor","addContent","content","id","parseInt","title","description","creator","promise","Promise","resolve","reject","error","contentAdded","emit","then","console","log","additionFailed","catch","selectors","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\asus\\Desktop\\Assignments\\Assignments Part 4 (2023)\\4. Prem Parikh\\Pre_Parikh_IndianCricketTeam\\src\\app\\create-content\\create-content.component.ts","C:\\Users\\asus\\Desktop\\Assignments\\Assignments Part 4 (2023)\\4. Prem Parikh\\Pre_Parikh_IndianCricketTeam\\src\\app\\create-content\\create-content.component.html"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { Content } from '../helper-files/content-interface';\n\n@Component({\n  selector: 'app-create-content',\n  templateUrl: './create-content.component.html',\n  styleUrls: ['./create-content.component.css'],\n})\nexport class CreateContentComponent {\n  @Output() contentAdded = new EventEmitter<Content>();\n  id: string = '';\n  title: string = '';\n  description: string = '';\n  creator: string = '';\n  additionFailed: boolean = false;\n  error: string = '';\n\n  addContent() {\n    const content: Content = {\n      id: parseInt(this.id),\n      title: this.title,\n      description: this.description,\n      creator: this.creator,\n    };\n    const promise = new Promise<void>((resolve, reject) => {\n      if (!this.title || !this.description || !this.creator || !this.id) {\n        this.error = 'Please fill in all required fields.';\n        return reject('Missing required fields');\n      }\n      this.contentAdded.emit(content);\n      this.error = '';\n      this.id = '';\n      this.title = '';\n      this.description = '';\n      this.creator = '';\n\n      resolve();\n    });\n\n    promise.then(() => {\n      console.log(`Successfully added ${content.title}!`);\n      this.additionFailed = false;\n    })\n    .catch(() => {\n      console.error(`Failed to add ${content.title}`);\n      this.additionFailed = true;\n    });;\n  }\n}\n","<div class=\"create-content-card\">\n\n    <h3>Add a Content</h3>\n    \n    <div class=\"input\">Id: <input [(ngModel)]=\"id\"></div>\n    <div class=\"input\">Title: <input [(ngModel)]=\"title\"></div>\n    <div class=\"input\">Description: <input [(ngModel)]=\"description\"></div>\n    <div class=\"input\">Creator: <input [(ngModel)]=\"creator\"></div>\n    <button class=\"input\" (click)=\"addContent()\">Create Content</button>\n    <p *ngIf=\"additionFailed\" style=\"color: red; font-weight: bold;\">Failed to add content.</p>\n    <div *ngIf=\"error\" style=\"color: red; font-weight: bold;\">{{ error }}</div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}